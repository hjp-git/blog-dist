(window.webpackJsonp=window.webpackJsonp||[]).push([[215],{628:function(e,v,t){"use strict";t.r(v);var _=t(1),o=Object(_.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("div",{staticClass:"custom-block warning"},[v("p",{staticClass:"title"}),v("p",[e._v("实例化之后才能使用")])]),v("h2",{attrs:{id:"一些属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一些属性"}},[e._v("#")]),e._v(" 一些属性")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("$root")]),e._v(" ,"),v("code",[e._v("$parent")]),e._v(" ,"),v("code",[e._v("$children")]),e._v(" 属性\n"),v("ul",[v("li",[v("code",[e._v("$root")]),e._v(" 当前组件树的根 Vue 实例。如果当前实例没有父实例，此实例将会是其自己")]),e._v(" "),v("li",[v("code",[e._v("$parent")]),e._v("\t父实例")]),e._v(" "),v("li",[v("code",[e._v("$children")]),e._v("\t子实例，返回的是一个集合")])])])]),e._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"title"}),v("p",[v("code",[e._v("$root")]),e._v(" ，"),v("code",[e._v("$parent")]),e._v(" 都能够实现访问父组件的属性的方法，两者的区别在于，如果存在多级子组件，通过 "),v("code",[e._v("$parent")]),e._v(" 访问得到的是它上一级的父组件，通过 "),v("code",[e._v("$root")]),e._v(" 访问得到的是根组件。")])]),v("h2",{attrs:{id:"一些方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一些方法"}},[e._v("#")]),e._v(" 一些方法")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("Vue实例 | 组件实例.$destroy()")]),e._v(" 进行内部销毁实例")]),e._v(" "),v("li",[v("code",[e._v("Vue实例 | 组件实例.$set()")]),e._v(" 向响应式对象中添加一个 "),v("code",[e._v("property")]),e._v(" ，并确保这个新 "),v("code",[e._v("property")]),e._v(" 同样是响应式的，且触发视图更新")]),e._v(" "),v("li",[v("code",[e._v("Vue实例 | 组件实例.$options()")]),e._v(" 获取自定义属性和方法")]),e._v(" "),v("li",[v("code",[e._v("Vue实例 | 组件实例.$delet()")]),e._v(" 删除属性值")]),e._v(" "),v("li",[v("code",[e._v("Vue实例 | 组件实例.$watc()")]),e._v(" 监听数据变化")]),e._v(" "),v("li",[v("code",[e._v("Vue实例 | 组件实例.$mount()")]),e._v(" 手动挂载Vue实例")]),e._v(" "),v("li",[v("code",[e._v("Vue实例 | 组件实例.$nextTick()")]),e._v(" 将方法中的回调函数，延迟到DOM更新后")]),e._v(" "),v("li",[v("code",[e._v("Vue实例 | 组件实例.$forceUpdate()")]),e._v(" 迫使 Vue 实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。")]),e._v(" "),v("li",[v("code",[e._v("Vue实例 | 组件实例.$on()")]),e._v(" \t监听当前实例上的自定义事件(绑定事件)")]),e._v(" "),v("li",[v("code",[e._v("Vue实例 | 组件实例.$emit()")]),e._v(" 触发当前实例上的事件。附加参数都会传给监听器回调")]),e._v(" "),v("li",[v("code",[e._v("Vue实例 | 组件实例.$off()")]),e._v(" 移除自定义事件监听器(解绑事件)")])])])}),[],!1,null,null,null);v.default=o.exports}}]);